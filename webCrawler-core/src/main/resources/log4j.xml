<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

    <!--log4j.xml 配置文件 优先于 log4j.properties 配置文件 -->
    <!-- * 1. 一个appender子元素定义一个日志输出目的地 * 2. 一个logger子元素定义一个日志写出器 -->
    <!-- ========================== 自定义输出格式说明================================ -->
    <!-- %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL -->
    <!-- %r 输出自应用启动到输出该log信息耗费的毫秒数 -->
    <!-- %c 输出所属的类目，通常就是所在类的全名 -->
    <!-- %t 输出产生该日志事件的线程名 -->
    <!-- %n 输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n” -->
    <!-- %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS} -->
    <!-- 输出类似：2002年10月18日 22：10：28，921 -->
    <!-- %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10) -->
    <!-- ========================================================================== -->

    <!-- ========================== 输出方式说明================================ -->
    <!-- Log4j提供的appender有以下几种: -->
    <!-- org.apache.log4j.ConsoleAppender(控制台), -->
    <!-- org.apache.log4j.FileAppender(文件), -->
    <!-- org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件), -->
    <!-- org.apache.log4j.RollingFileAppender(文件大小到达指定尺寸的时候产生一个新的文件), -->
    <!-- org.apache.log4j.WriterAppender(将日志信息以流格式发送到任意指定的地方) -->
    <!-- ========================================================================== -->

    <appender name="stdout" class="org.apache.log4j.ConsoleAppender">
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%d{yy-MM-dd HH:mm:ss,SSS} %-5p %c(%F:%L) ## %m%n"/>
        </layout>
    </appender>

    <appender name="myFile" class="org.apache.log4j.RollingFileAppender">
        <param name="File" value="D:/output.log" /><!-- 设置日志输出文件名 -->
        <!-- 设置是否在重新启动服务时，在原有日志的基础添加新日志 -->
        <param name="Append" value="true" />
        <param name="MaxBackupIndex" value="10" />
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%d{yy-MM-dd HH:mm:ss,SSS} %-5p %c(%F:%L) ## %m%n" />
        </layout>
    </appender>

    <!-- 输出到日志文件 每天一个日志 -->
    <appender name="LOGDEBUG" class="org.apache.log4j.DailyRollingFileAppender">
        <!-- Threshold屏蔽级别之下的日志输出 -->
        <param name="Threshold" value="DEBUG" />
        <param name="encoding" value="UTF-8" />
        <param name="File" value="/Users/LinkinPark/WorkSpace/linkin-frame-javaweb/log/linkin-debug.log" />
        <param name="DatePattern" value="'debug_'yyyy-MM-dd'.log'" />
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%c] [%L] %p [%m]%n" />
        </layout>
    </appender>

    <appender name="LOGINFO" class="org.apache.log4j.DailyRollingFileAppender">
        <!-- <param name="Threshold" value="INFO" /> -->
        <param name="encoding" value="UTF-8" />
        <param name="File" value="/Users/LinkinPark/WorkSpace/linkin-frame-javaweb/log/linkin-info.log" />
        <param name="DatePattern" value="'info_'yyyy-MM-dd'.log'" />
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%c] [%L] %p [%m]%n" />
        </layout>
        <!--限制输出级别 -->
        <filter class="org.apache.log4j.varia.LevelRangeFilter">
            <param name="LevelMin" value="INFO" />
            <param name="LevelMax" value="INFO" />
        </filter>
    </appender>

    <appender name="LOGERROR" class="org.apache.log4j.DailyRollingFileAppender">
        <!-- <param name="Threshold" value="ERROR" /> -->
        <param name="encoding" value="UTF-8" />
        <param name="File" value="/Users/LinkinPark/WorkSpace/linkin-frame-javaweb/log/linkin-error.log" />
        <param name="DatePattern" value="'error_'yyyy-MM-dd'.log'" />
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%c] [%L] %p [%m]%n" />
        </layout>
        <filter class="org.apache.log4j.varia.LevelRangeFilter">
            <param name="LevelMin" value="ERROR" />
            <param name="LevelMax" value="ERROR" />
        </filter>
    </appender>

    <!-- 指定logger的设置，additivity指示是否遵循缺省的继承机制-->
    <logger name="org.apache" additivity="false">
        <level value="warn"/>
        <appender-ref ref="stdout"/>
    </logger>

    <!-- 根logger的设置-->
    <root>
        <level value="info"/>
        <appender-ref ref="stdout"/>
        <appender-ref ref="myFile"/>
    </root>

</log4j:configuration>
